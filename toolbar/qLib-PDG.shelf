<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="qLib-PDG" label="qLib-PDG">
    <memberTool name="qLib::ResizeTaskGraph"/>
    <memberTool name="qLib::FitWorkItemsToTaskGraph"/>
    <memberTool name="qLib::SelectCookedPdgNodes"/>
    <memberTool name="qLib::SelectErroredPdgNodes"/>
  </toolshelf>

  <tool name="qLib::ResizeTaskGraph" label="-/tasks/+" icon="IMAGE_zoom_in">
    <helpText><![CDATA[#icon: IMAGE/zoom_out
#type: tool

= Resize Task Graph qL =

*version 1*

"""Increases/decreases the number of work items shown.
---
LMB: More work items shown.
Shift-LMB: Less work items shown.
Ctrl-LMB: Reset to default.
"""]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils
import nodegraphprefs as prefs

editor = toolutils.networkEditor()

shift = kwargs['shiftclick']
ctrl  = kwargs['ctrlclick']
alt   = kwargs['altclick']

m = 1.5

if not (shift or alt):
    m = 1.0/m;

rows = max(2, int(int(prefs.maxTaskGraphRows(editor))*m))
items = max(2, int(int(prefs.maxWorkItemsPerRow(editor))*m))

if ctrl:
    rows = 14
    items = 10

prefs.setMaxTaskGraphRows(editor, str(rows))
prefs.setMaxWorkItemsPerRow(editor, str(items))

editor.redraw()

]]></script>
  </tool>

  <tool name="qLib::SelectCookedPdgNodes" label="sel: cooked" icon="TOP_status_cooked">
    <script scriptType="python"><![CDATA[import hou
import toolutils

editor = toolutils.networkEditor()
nodes = editor.pwd().children()

hou.clearAllSelected()

for node in nodes:
    try:
        pdgnode = node.getPDGNode() if hasattr(node, "getPDGNode") else None
        if pdgnode and hasattr(pdgnode, "isCooked") and pdgnode.isCooked:
            node.setSelected(True)
    except:
        pass]]></script>
  </tool>

  <tool name="qLib::FitWorkItemsToTaskGraph" label="/fit w.items/" icon="IMAGE_inspect_styles">
    <helpText><![CDATA[#icon: IMAGE/inspect_styles
#type: tool

= Fit Work Items to Task Graph qL =

*version 1*

"""Resizes the task graph so all work items for the selected node(s) will fit.
---
LMB: Resize task graph to show all workitems for selected node.
Ctrl-LMB: Reset task graph to default
"""]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils
import nodegraphprefs as prefs

editor = toolutils.networkEditor()

shift = kwargs['shiftclick']
ctrl  = kwargs['ctrlclick']
alt   = kwargs['altclick']

sel = [ n.getPDGNode() for n in hou.selectedNodes() if hasattr(n, "getPDGNode") ]
items = [ len(n.workItems) for n in sel if hasattr(n, "workItems") ]

if len(items)>0:
    items = sorted(items)[-1]
    # round up to 10
    items = ((items/40)+1)*40
    # some min/max limits for item count
    items = max(200, items)
    items = min(8000, items)
    items = int(items)

    # find divisors
    d = [ (n, items/n) for n in range(2, items) if items%n==0 ]
    d = d[ int(len(d)/2) ]
    if d[0]>d[1]:
        d = ( d[1], d[0], )
    d = ( max(8, d[0]), max(8, d[1]) )

    items = d[0]
    rows = d[1]
    if ctrl:
        rows = 14
        items = 10

    prefs.setMaxTaskGraphRows(editor, str(rows))
    prefs.setMaxWorkItemsPerRow(editor, str(items))
    
    editor.redraw()
]]></script>
  </tool>

  <tool name="qLib::SelectErroredPdgNodes" label="sel: errored" icon="TOP_status_error">
    <script scriptType="python"><![CDATA[import hou
import toolutils

editor = toolutils.networkEditor()
nodes = editor.pwd().children()

hou.clearAllSelected()

for node in nodes:
    try:
        pdgnode = node.getPDGNode() if hasattr(node, "getPDGNode") else None
        if pdgnode and hasattr(pdgnode, "hasErrors") and pdgnode.hasErrors:
            node.setSelected(True)
    except:
        pass]]></script>
  </tool>
</shelfDocument>
