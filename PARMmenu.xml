<?xml version="1.0" encoding="UTF-8"?>

<!--
    This file defines the menu items when right-clicking over parameters in
    Houdini.

    Files named the same (ie. PARMmenu.xml) can exist in $HOME/houdiniX.Y/
    directory and will supplement the original definitions found in
    $HFS/houdini/ (aka $HH).

    The format in this file is similar to the format in $HH/MainMenuMaster
    except that it uses the <menuDocument> and <menu> tags instead of
    <mainMenu> and <menuBar>. See the comments in that file for more advanced
    customization abilities.

    Another difference here is that most menu items in this file have no labels
    because they are dynamically created by Houdini. If labels are supplied to
    the items which currently have no labels in this file, they will be
    ignored.

    Note that the id's correspond to their hotkeys with the h.pane.parms.
    prefix (where available). For example, the item with id,
    "revert_to_prev_val", refers to the action in the hotkeys manager as
    "h.pane.parms.revert_to_prev_val".

    For scriptItem elements, a 'kwargs' python dictionary is provided with the
    following values:
	'parms'	    :	A list of hou.Parm objects which the script was invoked
			upon.
	'toolname'  :	The menu item's hotkey id (ie. the element's id
			prefixed with h.pane.parms.)
	'altclick'  :	True if the Alt key was also pressed, False otherwise
	'ctrlclick'  :	True if the Ctrl key was also pressed, False otherwise
	'shiftclick'  :	True if the Shift key was also pressed, False otherwise
	'cmdclick'  :	True if the Option key was also pressed, False
			otherwise. Note that this can only be true on OSX.
-->

<menuDocument>
<!-- menuDocument can only contain 1 menu element, whose id is
 implicitly "root_menu"
-->
	<menu>

		<scriptItem id="toggle_abs_rel_path_ql">
			<label>Toggle Absolute/Relative Path [qL]</label>
			<context>
				<expression>len(kwargs['parms'])>0 and type(kwargs['parms'][0].parmTemplate()) is hou.StringParmTemplate</expression>
			</context>
			<modifyItem><insertAfter>revert_to_prev_val</insertAfter></modifyItem>
			<scriptCode><![CDATA[
import qlibutils; qlibutils.toggle_abs_rel_path(kwargs)
]]></scriptCode>
		</scriptItem>



		<subMenu id="qlib_menu">
			<label>More [qL]</label>
			<modifyItem><insertAfter>motion_effects_menu</insertAfter></modifyItem>


			<scriptItem id="ql_open_in_file_browser">
				<label>Open as Path in File Browser...</label>
				<context>
					<expression>len(kwargs['parms'])>0 and type(kwargs['parms'][0].parmTemplate()) is hou.StringParmTemplate</expression>
				</context>
				<scriptCode><![CDATA[
import qlibutils, os
qlibutils.open_dir( os.path.dirname(str(kwargs['parms'][0].eval())) )
]]></scriptCode>
			</scriptItem>

			<scriptItem id="ql_select_target_op">
				<label>Select (Add) Target Node</label>
				<context>
					<expression>len(kwargs['parms'])>0 and kwargs['parms'][0].evalAsNode() is not None</expression>
				</context>
				<scriptCode><![CDATA[
kwargs['parms'][0].evalAsNode().setSelected(True)
]]></scriptCode>
			</scriptItem>

			<separatorItem/>


			<scriptItem id="ql_set_to_parent_network_1">
				<label>[subnet]: Parent Network, Input #1 (0)</label>
				<context>
					<expression>len(kwargs['parms'])>0 and type(kwargs['parms'][0].parmTemplate()) is hou.StringParmTemplate</expression>
				</context>
				<scriptCode><![CDATA[
try:
	kwargs['parms'][0].set("%s`opinputpath('..', 0)`" % ('op:' if kwargs['ctrlclick'] else '') )
except:
	pass
]]></scriptCode>
			</scriptItem>

			<scriptItem id="ql_set_to_parent_network_2">
				<label>[subnet]: Parent Network, Input #2 (1)</label>
				<context>
					<expression>len(kwargs['parms'])>0 and type(kwargs['parms'][0].parmTemplate()) is hou.StringParmTemplate</expression>
				</context>
				<scriptCode><![CDATA[
try:
	kwargs['parms'][0].set("%s`opinputpath('..', 1)`" % ('op:' if kwargs['ctrlclick'] else '') )
except:
	pass
]]></scriptCode>
			</scriptItem>


			<scriptItem id="ql_set_to_parent_network_3">
				<label>[subnet]: Parent Network, Input #3 (2)</label>
				<context>
					<expression>len(kwargs['parms'])>0 and type(kwargs['parms'][0].parmTemplate()) is hou.StringParmTemplate</expression>
				</context>
				<scriptCode><![CDATA[
try:
	kwargs['parms'][0].set("%s`opinputpath('..', 2)`" % ('op:' if kwargs['ctrlclick'] else '') )
except:
	pass
]]></scriptCode>
			</scriptItem>


			<scriptItem id="ql_set_to_parent_network_4">
				<label>[subnet]: Parent Network, Input #4 (3)</label>
				<context>
					<expression>len(kwargs['parms'])>0 and type(kwargs['parms'][0].parmTemplate()) is hou.StringParmTemplate</expression>
				</context>
				<scriptCode><![CDATA[
try:
	kwargs['parms'][0].set("%s`opinputpath('..', 3)`" % ('op:' if kwargs['ctrlclick'] else '') )
except:
	pass
]]></scriptCode>
			</scriptItem>


			<separatorItem/>


			<scriptItem id="ql_add_parm_value_multiplier">
				<label>Add Value/Multiplier to Parameter</label>
				<context>
					<expression>len(kwargs['parms'])>0 and type(kwargs['parms'][0].parmTemplate()) is hou.FloatParmTemplate</expression>
				</context>
				<scriptCode><![CDATA[
import qlibutils; reload(qlibutils);
qlibutils.add_parm_value_multiplier(kwargs)
]]></scriptCode>
			</scriptItem>

			<scriptItem id="ql_add_parm_value_multiplier_exp">
				<label>Add Value/Multiplier + Exponent</label>
				<context>
					<expression>len(kwargs['parms'])>0 and type(kwargs['parms'][0].parmTemplate()) is hou.FloatParmTemplate</expression>
				</context>
				<scriptCode><![CDATA[
import qlibutils; reload(qlibutils);
qlibutils.add_parm_value_multiplier(kwargs, add_exponent=True)
]]></scriptCode>
			</scriptItem>

			<scriptItem id="ql_set_rampbasis_label">
				<label>Set Ramp to...</label>
				<context>
					<expression>len(kwargs['parms'])>0 and type(kwargs['parms'][0].parmTemplate()) is hou.RampParmTemplate</expression>
				</context>
			</scriptItem>

			<separatorItem/>

			<scriptItem id="ql_set_rampbasis_Constant">
				<label>Constant</label>
				<context>
					<expression>len(kwargs['parms'])>0 and type(kwargs['parms'][0].parmTemplate()) is hou.RampParmTemplate</expression>
				</context>
				<scriptCode><![CDATA[
import qlibutils; qlibutils.set_ramp_basis(kwargs, hou.rampBasis.Constant)
]]></scriptCode>
			</scriptItem>

			<scriptItem id="ql_set_rampbasis_linear">
				<label>Linear</label>
				<context>
					<expression>len(kwargs['parms'])>0 and type(kwargs['parms'][0].parmTemplate()) is hou.RampParmTemplate</expression>
				</context>
				<scriptCode><![CDATA[
import qlibutils; qlibutils.set_ramp_basis(kwargs, hou.rampBasis.Linear)
]]></scriptCode>
			</scriptItem>

			<scriptItem id="ql_set_rampbasis_CatmullRom">
				<label>Catmull-Rom</label>
				<context>
					<expression>len(kwargs['parms'])>0 and type(kwargs['parms'][0].parmTemplate()) is hou.RampParmTemplate</expression>
				</context>
				<scriptCode><![CDATA[
import qlibutils; qlibutils.set_ramp_basis(kwargs, hou.rampBasis.CatmullRom)
]]></scriptCode>
			</scriptItem>

			<scriptItem id="ql_set_rampbasis_MonotoneCubic">
				<label>Monotone Cubic</label>
				<context>
					<expression>len(kwargs['parms'])>0 and type(kwargs['parms'][0].parmTemplate()) is hou.RampParmTemplate</expression>
				</context>
				<scriptCode><![CDATA[
import qlibutils; qlibutils.set_ramp_basis(kwargs, hou.rampBasis.MonotoneCubic)
]]></scriptCode>
			</scriptItem>

			<scriptItem id="ql_set_rampbasis_Bezier">
				<label>Bezier</label>
				<context>
					<expression>len(kwargs['parms'])>0 and type(kwargs['parms'][0].parmTemplate()) is hou.RampParmTemplate</expression>
				</context>
				<scriptCode><![CDATA[
import qlibutils; qlibutils.set_ramp_basis(kwargs, hou.rampBasis.Bezier)
]]></scriptCode>
			</scriptItem>

			<scriptItem id="ql_set_rampbasis_BSpline">
				<label>B-Spline</label>
				<context>
					<expression>len(kwargs['parms'])>0 and type(kwargs['parms'][0].parmTemplate()) is hou.RampParmTemplate</expression>
				</context>
				<scriptCode><![CDATA[
import qlibutils; qlibutils.set_ramp_basis(kwargs, hou.rampBasis.BSpline)
]]></scriptCode>
			</scriptItem>

			<scriptItem id="ql_set_rampbasis_Hermite">
				<label>Hermite</label>
				<context>
					<expression>len(kwargs['parms'])>0 and type(kwargs['parms'][0].parmTemplate()) is hou.RampParmTemplate</expression>
				</context>
				<scriptCode><![CDATA[
import qlibutils; qlibutils.set_ramp_basis(kwargs, hou.rampBasis.Hermite)
]]></scriptCode>
			</scriptItem>

		</subMenu>

		<subMenu id="qlib_string_rel_ref_menu">
			<label>Reference String Parm [qL]</label>
			<modifyItem><insertAfter>reference_menu</insertAfter></modifyItem>
			<context>
				<expression>len(kwargs['parms'])>0 and type(kwargs['parms'][0].parmTemplate()) is hou.StringParmTemplate</expression>
			</context>

			<scriptMenuStripDynamic id="qlib_string_rel_ref_items">
			<contentsScriptCode><![CDATA[
			node = kwargs["parms"][0].node() # hou.node('/obj/geo1/null1')

			nodes = hou.hscript("opdepend -i %s" % node.path())[0].split()
			nodes = [ hou.node(n) for n in nodes ]

			types = ( hou.parmTemplateType.String, )
			parms = []

			# TODO: filter out menus so it'll be only string fields!
			def iz_good(pt):
				p = pt[0]
				t = pt[0].parmTemplate()
				s = p.evalAsString()
				return \
					(pt.parmTemplate().type() in types) \
					and s!="" and "/" not in s \
					and not p.isDisabled() and not p.isHidden()

			for n in nodes:
				n.updateParmStates()
				parms += [ pt[0] for pt in n.parmTuples() if iz_good(pt) ]

			parms = [ p.path() for p in parms ]

			# TODO: limit menu items?
			menu_items = []
			for pn in parms:
				p = hou.parm(pn)
				rel_pn = node.relativePathTo(p.node())+"/"+p.name()
				rel_path = [ rel_pn ]
				if len(p.keyframes())>0 or p.evalAsString()!=p.rawValue():
					rel_path += [ "<anim/expr>" ]
				rel_path = "  ".join(rel_path)

				menu_items.append(rel_pn)
				menu_items.append('"%s"  ( %s )' % (p.evalAsString(), rel_path, ) )

			return menu_items
			]]></contentsScriptCode>
			<scriptCode><![CDATA[
src = hou.parmTuple(kwargs["selectedtoken"])
for parm in kwargs["parms"]:
	parm.deleteAllKeyframes()
	parm.revertToDefaults()
	#parm.tuple().set(src)
	parm.set("`chs(\"%s\""")`" % kwargs["selectedtoken"])
]]></scriptCode>
	</scriptMenuStripDynamic>

		</subMenu>



	</menu>
</menuDocument>
